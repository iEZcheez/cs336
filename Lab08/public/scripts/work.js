//PART 1: COMMENT BOX DECLARATION
//this.state is private to the component and can be changed by calling this.setState().
//When the state updates, the component re-renders itself.
//componentDidMount is a method called automatically by React after
//a component is rendered for the first time.
var CommentBox = React.createClass({
    //function to GET comments from server
    loadCommentsFromServer: function() {
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            cache: false,
            success: function(data) {
                this.setState({data: data});
            }.bind(this),
            error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    // Function to submit to the server and refresh the list
    handleCommentSubmit: function(comment) {
        // Make it faster
        var comments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        comment.id = Date.now();
        var newComments = comments.concat([comment]);
        this.setState({data: newComments});

        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data: comment,
            success: function(data) {
                this.setState({data: data});
            }.bind(this),
            error: function(xhr, status, err) {
                this.setState({data: comments});
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    //this executes only once during the "lifecycle"
    getInitialState: function() {
        return {
            data: []
        };
    },
    componentDidMount: function() {
        this.loadCommentsFromServer();
        setInterval(this.loadCommentsFromServer, this.props.pollInterval);
    },
    render: function() {
        return (
            <div className="commentBox">
                <h1>Comments</h1>
                <CommentList data={this.state.data} />
                <CommentForm onCommentSubmit={this.handleCommentSubmit} />
            </div>
        );
    }
});

//PART 2: COMMENT LIST DECLARATION
var CommentList = React.createClass({
    render: function() {
        var commentNodes = this.props.data.map(function(comment) {
            return (
                <Comment author={comment.author} key={comment.id}>
                    {comment.text}
                </Comment>
            )
        });
        return (
            <div className="commentList">
                {commentNodes}
            </div>
        );
    }
});

//PART 3: COMMENT FORM DECLARATION
var CommentForm = React.createClass({
    getInitialState: function() {
        return {
            author: '',
            text: ''
        };
    },
    handleAuthorChange: function(e) {
        this.setState({
            author: e.target.value
        });
    },
    handleTextChange: function(e) {
        this.setState({
            text: e.target.value
        });
    },
    // override the submission form
    handleSubmit: function(e) {
        e.preventDefault();
        var author = this.state.author.trim();
        var text = this.state.text.trim();
        // if not text or not author then don't update
        if (!text || !author) {
            return;
        }
        // submit author and text properties
        this.props.onCommentSubmit({author: author, text: text});
        // otherwise send request to the server
        this.setState({author: '', text: ''});
    },
    render: function() {
        return (
            <div className="commentForm" onSubmit={this.handleSubmit}>
                {/*form the send comments*/}
                <form className="commentForm">
                    <input
                        type="text"
                        placeholder="Your name..."
                        // value allows for controlled components
                        value={this.state.author}
                        // on change allows it as well
                        onChange={this.handleAuthorChange}
                    />
                    <input
                        type="text"
                        placeholder="Your comment..."
                        value={this.state.text}
                        onChange={this.handleTextChange}
                    />
                    <input type="submit" value="Post"/>
                </form>
                {/*comments.json will pass down to these*/}
                {/*this.props.author*/}
                {/*this.props.children*/}
                {/*<Comment author="Pete Hunt"> This is one comment </Comment>*/}
                {/*<Comment author="Jordan Walke"> This is *another* </Comment>*/}
            </div>
        );
    }
});

//PART 4: COMMENT ELEMENT
//These 'properties' are accessed through this.props.
//Using props, we will be able to read the data passed to the Comment
//from the CommentList, and render some markup:

//REMARKABLE LIBRARY:
//third-party library remarkable which takes
//Markdown text and converts it to raw HTML
var Comment = React.createClass({
    rawMarkup: function() {
        var md = new Remarkable();
        var rawMarkup = md.render(this.props.children.toString());
        return { __html: rawMarkup };
    },

    render: function() {
        return (
            <div className="comment">
                <h2 className="commentAuthor">
                    {this.props.author}
                </h2>
                <span dangerouslySetInnerHTML={this.rawMarkup()} />
            </div>
        );
    }
});

// PART FINAL: RENDER
// React components implement a render() method that
// takes input data and returns what to display
ReactDOM.render(
    //React classes begin with uppercase letters
    //Refresh the comments every 2 seconds
    //"/api/comments" accesses comments.json in the directory
    <CommentBox url="/api/comments" pollInterval={2000} />,
    document.getElementById('content')
);