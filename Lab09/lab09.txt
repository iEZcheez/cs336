9.2
a. What good has this bundling done? How big is the new bundle file?
Check the Chrome DevTools network log to see what files are being loaded.
    - bundle.js is fairly large in terms of number of lines
    - the file is about 1.3 MB

b. What role did Babel play in the bundling?
    - Babel makes sure that the code is transpiled accordingly
    - In Babel, a preset is a set of plugins used to support particular language features.
    - The two presets Babel uses by default: es2015 : Adds support for ES2015 (or ES6) JavaScript.

c. Can you just load file:///path…/index.html using the browser? Why or why not?
    - http://localhost:3000/dist/index.html does not work for me
    - it appears that the bundle must be generated before the html can be displayed
    - the html is not able to be found because of no files being made

d. In webpack.config.js, what does the loader test entry test: /\.jsx?$/ do?
    - Because we are using React, it is important to tell Babel to use JSX
    - "JSX is an HTML-like syntax that you can use with React to (theoretically)
    make it easier and more intuitive to create React components."

The server and application should now run as they did before. When you’ve confirmed that they do, consider the following:

a. Check out the new dist/index.html and dist/bundle.js.
    How are they different from the previous versions?
    - bundle.js appears to be much longer and handles the new modules with different functions

b. What good is it to replace the CDN library loads with module imports?
    - "Webpack is a module bundler. Its main purpose is to bundle JavaScript files for usage in a browser,
    yet it is also capable of transforming, bundling, or packaging just about any resource or asset"
    - it is more organized when separating the modules

c. Check the network log.
    How many of the new modules you built are being loaded?
    -
    How about the CSS file?
    - I did not use a CSS file in Lab08. Lab08 said it was optional. However, I added it in Lab09.

9.3
Try out both ports and explain the difference between them.
a. localhost:3001 — Try editing one of the React module files. Explain what happens, both to the displayed SPA webpage and to the bundle/index files.
- The page automatically refreshes and updates to the new .js files
- The bundle.js file changes as well

b. localhost:3000 — Try loading /api/comments. Explain what you get. Does the SPA page running on this port change (due to the edits made above) as well?
- It returns the comments.json to me, displaying all of its contents
-

For more information on this two-server configuration, see Webpack’s HMR & React-Hot-Loader — The Missing Manual.
c. Is it worth all this trouble to build a development configuration?
- I think it is worth it. It was not too many steps, and it serves as another place to develop your website
without affecting the front-end, if that term was used correctly. I believe I see dev as a common practice in
many websites or games I encounter.