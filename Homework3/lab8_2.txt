Explain:

1 The component structure of the application. What makes the UI composable and why does this matter?
- Components can pass down the props down to children in the the output
- Composition allows for "re-using" elements between components that inheritance cannot do
- The pre-made nodes are ready to be rendered in the DOM
- "render is called against a component instance so it has access to its props, state, and other properties"

2. what JSX does.
- "JSX is a preprocessor step that adds XML syntax to JavaScript. You can definitely use React without JSX but JSX makes React a lot more elegant. Just like XML, JSX tags have a tag name, attributes, and children. If an attribute value is enclosed in quotes, the value is a string."

3. why ReactJS is safe with respect to XSS.
- ReactJS "escapes" everything -- it prints the html directly onto the page
- Rather than passing a string that could have vulnerabiblity attacking code, passing functions are used instead
- Rendering and html string makes it into an img in the source code so there is no way to "insert markup" into the code

4. how the data flows through the components. How are comments loaded? created? saved.
- It is possible to use data from the parent by using props
- It is possible to use data from the child (to the parents) by using callbacks or states 
  myCallback = (dataFromChild) => {
        [...we will use the dataFromChild here...]
    },
   myCallback = (dataFromChild) => {
   
        this.setState({ listDataFromChild: dataFromChild });
    },
    otherFn = () => {
        [...within this other function now I still have access to this.state.listDataFromChild...]
    }

5. the nature and purpose of props and state. Which is immutable and which is mutable and why does this distinction matter?
- props are immutable and states are mutable
- the state uses the props; the props is the origin source; the state can be changed or be assigned to anything else

Consider the following, more detailed questions based on statements in the tutorial:
1. Try editing the comments.json file (to add or remove a legal comment). What happens and why?
- modifying the id, author, or text updates it in the DOM
- removal of a comment make it removed in the DOM

2. When the CommentBox has loaded comments from the server (in loadCommentsFromServer()), why doesn’t it call render() to make them visible?
- render() renders the CommentBox; the CommentBox loads the requests from the server and is ready to be rendered
- the CommentBox has to reload the comments again and then the render() will render the CommentBox again (it's like the Virtual DOM explained in class -- not sure if it is correct)

3. Of what advantage, if any, is it to require that components always represent the current state of the view?
- To ensure that it "always uses the most updated version of state."
- It is a good practice to have the latest version
- The reason why the comment list can update on everyone’s client is that the CommentBox “re-flashes” the data because the AJAX (from other people) to the server updates the State.

4. The app implements optimistic updates. Isn’t optimism here more like foolishness? What if the server rejects the new comment (for whatever reason)?
- It makes it faster -- however it did specify that it is not the best way to implement speed by using Date()
- If a comment is rejected, then it is best to stay away from this "optimization"
